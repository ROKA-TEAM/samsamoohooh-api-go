// Code generated by ent, DO NOT EDIT.

package topic

import (
	"samsamoohooh-go-api/internal/repository/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldDeleteAt, v))
}

// Field applies equality check predicate on the "field" field. It's identical to FieldEQ.
func Field(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldField, v))
}

// Feeling applies equality check predicate on the "feeling" field. It's identical to FeelingEQ.
func Feeling(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldFeeling, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldDeleteAt, v))
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldDeleteAt, v))
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldDeleteAt, vs...))
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldDeleteAt, vs...))
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldDeleteAt, v))
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldDeleteAt, v))
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldDeleteAt, v))
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldDeleteAt, v))
}

// DeleteAtIsNil applies the IsNil predicate on the "delete_at" field.
func DeleteAtIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldDeleteAt))
}

// DeleteAtNotNil applies the NotNil predicate on the "delete_at" field.
func DeleteAtNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldDeleteAt))
}

// FieldEQ applies the EQ predicate on the "field" field.
func FieldEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldField, v))
}

// FieldNEQ applies the NEQ predicate on the "field" field.
func FieldNEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldField, v))
}

// FieldIn applies the In predicate on the "field" field.
func FieldIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldField, vs...))
}

// FieldNotIn applies the NotIn predicate on the "field" field.
func FieldNotIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldField, vs...))
}

// FieldGT applies the GT predicate on the "field" field.
func FieldGT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldField, v))
}

// FieldGTE applies the GTE predicate on the "field" field.
func FieldGTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldField, v))
}

// FieldLT applies the LT predicate on the "field" field.
func FieldLT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldField, v))
}

// FieldLTE applies the LTE predicate on the "field" field.
func FieldLTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldField, v))
}

// FieldContains applies the Contains predicate on the "field" field.
func FieldContains(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContains(FieldField, v))
}

// FieldHasPrefix applies the HasPrefix predicate on the "field" field.
func FieldHasPrefix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasPrefix(FieldField, v))
}

// FieldHasSuffix applies the HasSuffix predicate on the "field" field.
func FieldHasSuffix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasSuffix(FieldField, v))
}

// FieldEqualFold applies the EqualFold predicate on the "field" field.
func FieldEqualFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldField, v))
}

// FieldContainsFold applies the ContainsFold predicate on the "field" field.
func FieldContainsFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldField, v))
}

// FeelingEQ applies the EQ predicate on the "feeling" field.
func FeelingEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldFeeling, v))
}

// FeelingNEQ applies the NEQ predicate on the "feeling" field.
func FeelingNEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldFeeling, v))
}

// FeelingIn applies the In predicate on the "feeling" field.
func FeelingIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldFeeling, vs...))
}

// FeelingNotIn applies the NotIn predicate on the "feeling" field.
func FeelingNotIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldFeeling, vs...))
}

// FeelingGT applies the GT predicate on the "feeling" field.
func FeelingGT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldFeeling, v))
}

// FeelingGTE applies the GTE predicate on the "feeling" field.
func FeelingGTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldFeeling, v))
}

// FeelingLT applies the LT predicate on the "feeling" field.
func FeelingLT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldFeeling, v))
}

// FeelingLTE applies the LTE predicate on the "feeling" field.
func FeelingLTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldFeeling, v))
}

// FeelingContains applies the Contains predicate on the "feeling" field.
func FeelingContains(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContains(FieldFeeling, v))
}

// FeelingHasPrefix applies the HasPrefix predicate on the "feeling" field.
func FeelingHasPrefix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasPrefix(FieldFeeling, v))
}

// FeelingHasSuffix applies the HasSuffix predicate on the "feeling" field.
func FeelingHasSuffix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasSuffix(FieldFeeling, v))
}

// FeelingEqualFold applies the EqualFold predicate on the "feeling" field.
func FeelingEqualFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldFeeling, v))
}

// FeelingContainsFold applies the ContainsFold predicate on the "feeling" field.
func FeelingContainsFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldFeeling, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Topic {
	return predicate.Topic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Topic {
	return predicate.Topic(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.Topic {
	return predicate.Topic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.Task) predicate.Topic {
	return predicate.Topic(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Topic) predicate.Topic {
	return predicate.Topic(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Topic) predicate.Topic {
	return predicate.Topic(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Topic) predicate.Topic {
	return predicate.Topic(sql.NotPredicates(p))
}
