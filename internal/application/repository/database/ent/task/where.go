// Code generated by ent, DO NOT EDIT.

package task

import (
	"samsamoohooh-go-api/internal/application/repository/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDeleteAt, v))
}

// Deadline applies equality check predicate on the "deadline" field. It's identical to DeadlineEQ.
func Deadline(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDeadline, v))
}

// Range applies equality check predicate on the "range" field. It's identical to RangeEQ.
func Range(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRange, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDeleteAt, v))
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldDeleteAt, v))
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldDeleteAt, vs...))
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldDeleteAt, vs...))
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldDeleteAt, v))
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldDeleteAt, v))
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldDeleteAt, v))
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldDeleteAt, v))
}

// DeleteAtIsNil applies the IsNil predicate on the "delete_at" field.
func DeleteAtIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldDeleteAt))
}

// DeleteAtNotNil applies the NotNil predicate on the "delete_at" field.
func DeleteAtNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldDeleteAt))
}

// DeadlineEQ applies the EQ predicate on the "deadline" field.
func DeadlineEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDeadline, v))
}

// DeadlineNEQ applies the NEQ predicate on the "deadline" field.
func DeadlineNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldDeadline, v))
}

// DeadlineIn applies the In predicate on the "deadline" field.
func DeadlineIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldDeadline, vs...))
}

// DeadlineNotIn applies the NotIn predicate on the "deadline" field.
func DeadlineNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldDeadline, vs...))
}

// DeadlineGT applies the GT predicate on the "deadline" field.
func DeadlineGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldDeadline, v))
}

// DeadlineGTE applies the GTE predicate on the "deadline" field.
func DeadlineGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldDeadline, v))
}

// DeadlineLT applies the LT predicate on the "deadline" field.
func DeadlineLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldDeadline, v))
}

// DeadlineLTE applies the LTE predicate on the "deadline" field.
func DeadlineLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldDeadline, v))
}

// RangeEQ applies the EQ predicate on the "range" field.
func RangeEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRange, v))
}

// RangeNEQ applies the NEQ predicate on the "range" field.
func RangeNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldRange, v))
}

// RangeIn applies the In predicate on the "range" field.
func RangeIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldRange, vs...))
}

// RangeNotIn applies the NotIn predicate on the "range" field.
func RangeNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldRange, vs...))
}

// RangeGT applies the GT predicate on the "range" field.
func RangeGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldRange, v))
}

// RangeGTE applies the GTE predicate on the "range" field.
func RangeGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldRange, v))
}

// RangeLT applies the LT predicate on the "range" field.
func RangeLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldRange, v))
}

// RangeLTE applies the LTE predicate on the "range" field.
func RangeLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldRange, v))
}

// HasGroup applies the HasEdge predicate on the "group" edge.
func HasGroup() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupWith applies the HasEdge predicate on the "group" edge with a given conditions (other predicates).
func HasGroupWith(preds ...predicate.Group) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newGroupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTopics applies the HasEdge predicate on the "topics" edge.
func HasTopics() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TopicsTable, TopicsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTopicsWith applies the HasEdge predicate on the "topics" edge with a given conditions (other predicates).
func HasTopicsWith(preds ...predicate.Topic) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newTopicsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Task) predicate.Task {
	return predicate.Task(sql.NotPredicates(p))
}
